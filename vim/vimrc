"==============================
" DEFAULTS
"==============================

source ~/.vim/base_vimrc.vim

"==============================
" STARTUP
"==============================
augroup vimStartup
  au!
  " When editing a file, always jump to the last known cursor position.
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END


"==============================
" EDITING
"==============================
packadd! editexisting " unclear if this works for iterm

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


"==============================
" PLUGINS OPTS
"==============================

"==============================
" onedark.vim
"==============================
packadd! onedark.vim
if (has("termguicolors"))
    set termguicolors
endif
highlight Normal ctermbg=None
highlight LineNr ctermfg=DarkGrey
colorscheme onedark

"==============================
" VIM-AIRLINE - STATUS LINE
"==============================
packadd! vim-airline
let g:airline_powerline_fonts = 1
" onedark from onedark.vim opts plugin
let g:airline_theme= 'onedark' "'codedark'
" remove the filetype part
let g:airline_section_x = ''
" remove file encoding
let g:airline_section_y = ''

" default zection z: %p%% %#__accent_bold#%{g:airline_symbols.linenr}%l%#__restore__#%#__accent_bold#/%L%{g:airline_symbols.maxlinenr}%#__restore__#:%v
let g:airline_section_z = airline#section#create('%#__accent_bold#%p%% | more.')
" remove separators for empty sections
let g:airline_skip_empty_sections = 1

let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#hunks#enabled = 0
let g:airline_mode_map = {
    \ '__'     : '-',
    \ 'c'      : 'C',
    \ 'i'      : 'I',
    \ 'ic'     : 'I',
    \ 'ix'     : 'I',
    \ 'n'      : 'N',
    \ 'multi'  : 'M',
    \ 'ni'     : 'N',
    \ 'no'     : 'N',
    \ 'R'      : 'R',
    \ 'Rv'     : 'R',
    \ 's'      : 'S',
    \ 'S'      : 'S',
    \ ''     : 'S',
    \ 't'      : 'T',
    \ 'v'      : 'V',
    \ 'V'      : 'V',
    \ ''     : 'V',
    \ }


"==============================
" PLUGINS START
"==============================

"==============================
" nerdtree
"==============================
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTreeToggle<CR>

" Start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif

" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
"==============================
" ENDWISE
"==============================

" disable mapping to not break coc.nvim if you map <CR> there.
"let g:endwise_no_mappings = 1

"==============================
" CONQUER OF COMPLETION
"==============================

let g:coc_global_extensions = ['coc-json']

" Use <CR> to confirm completition when popup is open
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use <Tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" Use <S-Tab> to navigate back up the completion list:
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" use <c-space> to trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" Remap keys for gotos
nmap <silent> gd :vsp<CR><Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" auto-format code and organize imports on save
" autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')


"==============================
" MARKDOWN
"==============================
nmap <leader>om <Plug>MarkdownPreview
nmap <leader>cm <Plug>MarkdownPreviewStop

nmap <leader>tc :GenTocGFM<CR>
nmap <leader>tcgl :GenTocGitLab<CR>
nmap <leader>rtc :RemoveToc<CR>

augroup markdownSpell
  au!
  autocmd FileType markdown setlocal spell spelllang=en_us
augroup END

"==============================
" TERRAFORM
"==============================
let g:terraform_align=1
let g:terraform_fmt_on_save=1

"==============================
" fzf + ripgrep - FAST FUZZY FINDER
"==============================
set grepprg=rg\ --vimgrep\ --smart-case\ --follow
set rtp+=/usr/local/opt/fzf

" settings from: https://github.com/BurntSushi/ripgrep/issues/1119#issuecomment-516116025
" Make Ripgrep ONLY search file contents and not filenames
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --hidden --smart-case --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4.. -e'}, 'right:50%:hidden', '?'),
  \   <bang>0)

nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <leader>f :Rg<CR>
" find current word
nnoremap <silent> <Leader>fw :Rg <C-R><C-W><CR>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>/ :BLines<CR>
nnoremap <silent> <Leader>' :Marks<CR>
nnoremap <silent> <Leader>g :Commits<CR>
nnoremap <silent> <Leader>H :Helptags<CR>
nnoremap <silent> <Leader>hh :History<CR>
nnoremap <silent> <Leader>h: :History:<CR>
nnoremap <silent> <Leader>h/ :History/<CR>
"==============================
" PLUGINS - PYTHON
"==============================

"==============================
" python-syntax
"==============================
let g:python_highlight_all = 1

"==============================
" SimplyFold
"==============================
let g:SimpylFold_docstring_preview = 1

"==============================
" ALE
"==============================
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_linters_explicit = 1
let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \}
" coc plugin handles lsp. See for more: https://github.com/dense-analysis/ale#5iii-how-can-i-use-ale-and-cocnvim-together
let g:ale_disable_lsp = 1

let g:ale_sign_error = '⤫'
let g:ale_sign_warning = '⚠'

let g:ale_go_golangci_lint_options = "--enable=bodyclose,exhaustive,rowserrcheck --disable=errcheck"
let g:ale_go_golangci_lint_package = 1
" move cursor to next/prev lint error
nmap <silent> <leader>e :ALENextWrap<CR>
nmap <silent> <leader>E :ALEPreviousWrap<CR>
nmap <silent> <leader>fmt :ALEFix<CR>
"==============================
" vim-hardtime
"==============================
let g:hardtime_default_on = 1
let g:hardtime_showmsg = 1
let g:hardtime_ignore_buffer_patterns = [ "NERD.*" ]
let g:hardtime_allow_different_key = 1
" let g:hardtime_ignore_quickfix = 1
"==============================
" vim-easymotion
"==============================
" set custome leader for easymotion
map , <Plug>(easymotion-prefix)

" search 2 chars everywhere
nmap s <Plug>(easymotion-s2)

" JK motions: Line motions
map ,j <Plug>(easymotion-j)
map ,k <Plug>(easymotion-k)
map ,L <Plug>(easymotion-bd-jk)

let g:EasyMotion_smartcase = 1
"==============================
" incsearch.vim
"==============================
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
