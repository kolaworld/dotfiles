"==============================
" DEFAULTS
"==============================

source ~/.vim/base_vimrc.vim

"==============================
" STARTUP
"==============================
augroup vimStartup
  au!
  " When editing a file, always jump to the last known cursor position.
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END


"==============================
" EDITING
"==============================
packadd! editexisting " unclear if this works for iterm

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit | wincmd p | diffthis
endif


"==============================
" PLUGINS
"==============================


"==============================
" ENDWISE
"==============================

" disable mapping to not break coc.nvim if you map <CR> there.
"let g:endwise_no_mappings = 1

"==============================
" CONQUER OF COMPLETION
"==============================

let g:coc_global_extensions = ['coc-json']

" Use <CR> to confirm completition when popup is open
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use <Tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" Use <S-Tab> to navigate back up the completion list:
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

inoremap <silent><expr> <c-space> coc#refresh()

"==============================
" VIM-AIRLINE - STATUS LINE
"==============================
" let g:airline_theme='molokai'
let g:airline_theme='codedark'
let g:airline#extensions#virtualenv#enabled = 1

"==============================
" MARKDOWN
"==============================
nmap <leader>om <Plug>MarkdownPreview
nmap <leader>cm <Plug>MarkdownPreviewStop

nmap <leader>tocgh :GenTocGFM<CR>
nmap <leader>tocgl :GenTocGitLab<CR>
nmap <leader>rmtoc :RemoveToc<CR>

augroup markdownSpell
  au!
  autocmd FileType markdown setlocal spell spelllang=en_us
augroup END

"==============================
" TERRAFORM
"==============================
let g:terraform_align=1
let g:terraform_fmt_on_save=1

"==============================
" fzf - FUZZY FILE FINDER
"==============================
set rtp+=/usr/local/opt/fzf

"==============================
" PLUGINS - PYTHON
"==============================

"==============================
" python-syntax
"==============================
let g:python_highlight_all = 1

"==============================
" SimplyFold
"==============================
let g:SimpylFold_docstring_preview = 1

"==============================
" ALE
"==============================
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0
let g:ale_linters_explicit = 1
let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \}
" coc plugin handles lsp. See for more: https://github.com/dense-analysis/ale#5iii-how-can-i-use-ale-and-cocnvim-together
let g:ale_disable_lsp = 1
